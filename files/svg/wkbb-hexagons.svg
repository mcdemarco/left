<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" id="hexagons" version="1.1" height="8.825in" width="10.475in" viewBox="60 0 1687 1560">

  <defs>
    <mask id="triangle">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />
      
      <!-- Everything under a black pixel will be invisible -->
      <polygon points="86.6,55 133,130 40,130" fill="black"/>
    </mask>
    <mask id="star">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />
      
      <!-- Everything under a black pixel will be invisible -->
      <path d="M80,55 L86.6,50 L93.2,55 L93.2,145 L86.6,150 L80,145 z" fill="black"/>
      <path d="M80,55 L86.6,50 L93.2,55 L93.2,145 L86.6,150 L80,145 z" fill="black" transform="rotate(60 86.6 100)" />
      <path d="M80,55 L86.6,50 L93.2,55 L93.2,145 L86.6,150 L80,145 z" fill="black" transform="rotate(120 86.6 100)" />
    </mask>
    <mask id="squircle">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />

      <!-- Everything under a black pixel will be invisible -->
      <circle cx="86.6" cy="100" r="40" fill="black"/>
      <rect x="46.6" y="100" width="80" height="40" rx="5" />
    </mask>
    <mask id="castle">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />

      <!-- Everything under a black pixel will be invisible -->
      <rect x="46.6" y="80" width="80" height="60" />
      <rect x="41.6" y="60" width="20" height="30" rx="5" />
      <rect x="76.6" y="60" width="20" height="30" rx="5" />
      <rect x="111.6" y="60" width="20" height="30" rx="5" />
    </mask>
    <mask id="houses">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />
      
      <!-- Everything under a black pixel will be invisible -->
      <polygon points="86.6,50 100,65 100,85 73.3,85, 73.3,65" fill="black"/>
      <polygon points="86.6,50 100,65 100,85 73.3,85, 73.3,65" fill="black" transform="translate(30,50)"/>
      <polygon points="86.6,50 100,65 100,85 73.3,85, 73.3,65" fill="black" transform="translate(-30,50)"/>
    </mask>
    <mask id="trees">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />
      
      <!-- Everything under a black pixel will be invisible -->
      <polygon points="86.6,40 100,80 90,80 90,90 83,90 83,80 73.3,80" fill="black"/>
      <polygon points="86.6,40 100,80 90,80 90,90 83,90 83,80 73.3,80" fill="black" transform="translate(30,50)"/>
      <polygon points="86.6,40 100,80 90,80 90,90 83,90 83,80 73.3,80" fill="black" transform="translate(-30,50)"/>
    </mask>
    <mask id="noop">
      <!-- Everything under a white pixel will be visible -->
      <polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" fill="white" />
    </mask>
  </defs>

  <g transform="translate(-200,-100)">
    <g style="fill:#d2bc76;cursor:pointer;">

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1297.6,150)" data-edge="1" data-row="-4" data-col="0" id="h:-4:0" mask="url(#trees)"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1124.6,150)" data-edge="1" data-row="-4" data-col="1" id="h:-4:1" mask="url(#star)"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(951.6,150)" data-edge="1" data-row="-4" data-col="2" id="h:-4:2" mask="url(#squircle)"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(778.6,150)" data-edge="1" data-row="-4" data-col="3" id="h:-4:3" mask="url(#castle)"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(605.6,150)" data-edge="1" data-row="-4" data-col="4" id="h:-4:4" mask="url(#houses)"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1384,300)" data-edge="1" data-row="-3" data-col="-1" id="h:-3:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1211,300)" data-edge="0" data-row="-3" data-col="0" id="h:-3:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1038,300)" data-edge="0" data-row="-3" data-col="1" id="h:-3:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(865,300)" data-edge="0" data-row="-3" data-col="2" id="h:-3:2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(692,300)" data-edge="0" data-row="-3" data-col="3" id="h:-3:3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(519,300)" data-edge="1" data-row="-3" data-col="4" id="h:-3:4"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1470.6,450)" data-edge="1" data-row="-2" data-col="-2" id="h:-2:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1297.6,450)" data-edge="0" data-row="-2" data-col="-1" id="h:-2:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1124.6,450)" data-edge="0" data-row="-2" data-col="0" id="h:-2:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(951.6,450)" data-edge="0" data-row="-2" data-col="1" id="h:-2:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(778.6,450)" data-edge="0" data-row="-2" data-col="2" id="h:-2:2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(605.6,450)" data-edge="0" data-row="-2" data-col="3" id="h:-2:3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(432.6,450)" data-edge="1" data-row="-2" data-col="4" id="h:-2:4"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1557,600)" data-edge="1" data-row="-1" data-col="-3" id="h:-1:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1384,600)" data-edge="0" data-row="-1" data-col="-2" id="h:-1:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1211,600)" data-edge="0" data-row="-1" data-col="-1" id="h:-1:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1038,600)" data-edge="0" data-row="-1" data-col="0" id="h:-1:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(865,600)" data-edge="0" data-row="-1" data-col="1" id="h:-1:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(692,600)" data-edge="0" data-row="-1" data-col="2" id="h:-1:2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(519,600)" data-edge="0" data-row="-1" data-col="3" id="h:-1:3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(346,600)" data-edge="1" data-row="-1" data-col="4" id="h:-1:4"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1643.6,750)" data-edge="1" data-row="0" data-col="-4" id="h:0:-4"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1470.6,750)" data-edge="0" data-row="0" data-col="-3" id="h:0:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1297.6,750)" data-edge="0" data-row="0" data-col="-2" id="h:0:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1124.6,750)" data-edge="0" data-row="0" data-col="-1" id="h:0:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(951.6,750)" data-edge="0" data-row="0" data-col="0" id="h:0:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(778.6,750)" data-edge="0" data-row="0" data-col="1" id="h:0:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(605.6,750)" data-edge="0" data-row="0" data-col="2" id="h:0:2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(432.6,750)" data-edge="0" data-row="0" data-col="3" id="h:0:3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(259.6,750)" data-edge="1" data-row="0" data-col="4" id="h:0:4"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1557,900)" data-edge="1" data-row="1" data-col="-4" id="h:1:-4"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1384,900)" data-edge="0" data-row="1" data-col="-3" id="h:1:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1211,900)" data-edge="0" data-row="1" data-col="-2" id="h:1:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1038,900)" data-edge="0" data-row="1" data-col="-1" id="h:1:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(865,900)" data-edge="0" data-row="1" data-col="0" id="h:1:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(692,900)" data-edge="0" data-row="1" data-col="1" id="h:1:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(519,900)" data-edge="0" data-row="1" data-col="2" id="h:1:2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(346,900)" data-edge="1" data-row="1" data-col="3" id="h:1:3"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1470.6,1050)" data-edge="1" data-row="2" data-col="-4" id="h:2:-4"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1297.6,1050)" data-edge="0" data-row="2" data-col="-3" id="h:2:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1124.6,1050)" data-edge="0" data-row="2" data-col="-2" id="h:2:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(951.6,1050)" data-edge="0" data-row="2" data-col="-1" id="h:2:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(778.6,1050)" data-edge="0" data-row="2" data-col="0" id="h:2:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(605.6,1050)" data-edge="0" data-row="2" data-col="1" id="h:2:1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(432.6,1050)" data-edge="1" data-row="2" data-col="2" id="h:2:2"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1384,1200)" data-edge="1" data-row="3" data-col="-4" id="h:3:-4"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1211,1200)" data-edge="0" data-row="3" data-col="-3" id="h:3:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1038,1200)" data-edge="0" data-row="3" data-col="-2" id="h:3:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(865,1200)" data-edge="0" data-row="3" data-col="-1" id="h:3:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(692,1200)" data-edge="0" data-row="3" data-col="0" id="h:3:0"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(519,1200)" data-edge="1" data-row="3" data-col="1" id="h:3:1"/>

	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1297.6,1350)" data-edge="1" data-row="4" data-col="-4" id="h:4:-4"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(1124.6,1350)" data-edge="1" data-row="4" data-col="-3" id="h:4:-3"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(951.6,1350)" data-edge="1" data-row="4" data-col="-2" id="h:4:-2"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(778.6,1350)" data-edge="1" data-row="4" data-col="-1" id="h:4:-1"/>
	<polygon points="86.6,200 173,150 173,50 86.6,0 0,50 0,150 86.6,200" stroke="black" stroke-width="1" transform="translate(605.6,1350)" data-edge="1" data-row="4" data-col="0" id="h:4:0"/>

    </g>
  </g>

	<script type="text/ecmascript"><![CDATA[
  		//Use the masks (true) or use flat colors (false).
  		var useMasks = true;
  		//Allow free editing of colors (true) or limit user color changes to adjacent colors (false).
  		var freeEdit = false;

  		//Define the colors.
  		var locationColor = "#111111"; //"#DEDACA";
		var mountainColor = "#31425C";
		var iceColor = "#225796";
		var terrainColors = ["#C0912F","#C7E0EB","#1C3D28","#A1AD40","#94516E","#5F608E"];
		                  //tundra  snowscape  forest  grassland  flower   fellfield 
		var nearLocationColors = terrainColors.slice(0);
		nearLocationColors.push(iceColor);
		var fullColors = nearLocationColors.slice(0);
		fullColors.push(mountainColor);
		var freeColors = fullColors.slice(0);
		freeColors.push(locationColor);
		//Swapped out filters for masks.
		var fullColorMasks = ["noop","star","noop","noop","noop","noop","noop","triangle"];

		//Layout changes from the original Kingdom Builder board generator:
		//rows are numbered (according to the visible layout, not actual SVG positions) -4 to 4.
		//"col"s are numbered -4 to 4 along the right-to-left diagonal.

		//More locations than before.
		var locationCount = 4;
	  	var strokeWidth = 7;

		function applyMask(element,color) {
			//Apply a mask from the array to the element.
			if (!color)
				color = element.getAttribute("fill");
			var maskIndex = fullColors.indexOf(color);
			if (useMasks) {
				if (maskIndex > -1)
					element.setAttribute("mask","url(#" + fullColorMasks[maskIndex] + ")");
				else
					element.setAttribute("mask","");
			}
			element.setAttribute("stroke","white"); //"#d2bc76");
			//element.setAttribute("stroke-width","20");
		}

		function changeFill(evt) {
			//Click to change the terrain type of a tile, with special behavior on locations.
			var element = evt.target;

			if (freeEdit) {
				//If free editing is allowed, use a random color and return.
				//randomFill(element,freeColors);
				//That was annoying, so cycle through the list.
				nextFill(element,freeColors);
				return;
			}

			//element.setAttribute("stroke-width",4); //handy for debugging

			if (document.getElementsByClassName("locationClass").length < locationCount) {
				//All three locations exist, so populate tile with (local) terrain.
				element.setAttribute("class","");
				controlledFill(element,0,true);
			} else {
				//When short on locations, click converts to a new location.
				element.setAttribute("class","locationClass");
				setFillAndMask(element,locationColor);
			}
			element.setAttribute("stroke-width",strokeWidth);
		}	

		function controlledFill(element, limit, toggle) {
			//Color or recolor (toggle) a tile based on neighboring colors if enough neighbors are colored (limit).
			var edge = element.getAttribute("data-edge");
			var tempIds = getLocalTiles(element);
			var tempFillColors = new Array ();

			for (var i = 0; i< tempIds.length; i++) {
				if ( ((tempColor = document.getElementById(tempIds[i]).getAttribute("fill")) != null)
					&& tempColor != locationColor
					&& tempFillColors.indexOf(tempColor) < 0 )
					tempFillColors.push(tempColor);
			}
			if (!limit || tempFillColors.length >= limit) {
				if (toggle && (currentColor = element.getAttribute("fill")) && ((currentColorIndex = tempFillColors.indexOf(currentColor)) > -1))
					tempFillColors.splice(currentColorIndex,1);
				randomFill(element,tempFillColors);
			}
		}	

		function init() {
			initFill();
			initPolygons();
		}

		function initFill() {
			//Initialize the board with locations and seed terrain, then fill in the rest.

			//If the board isn't blank (saved user output), don't initialize.
			if (document.getElementById("h:0:0").getAttribute("fill")) return;

			seedLocations();
			seedTerrain(9);
			fillTerrain(7);

			function fillTerrain(tries) {
				for (j = 0; j < tries; j++) {
					var allElements = document.getElementsByTagName("polygon");
					for (var i = 0; i < allElements.length; i++) {
						var element = allElements[i];
						if (!element.getAttribute("fill") || element.getAttribute("fill") == "null") {
							controlledFill(element,3-0.5*j);
							//console.log("found an unfilled tile on try " + j);
						}
					}
				}
			}
			//Init the viewbox.
			//shape = document.getElementsByTagName("svg")[0];
			//shape.setAttribute("viewBox", "0 0 250 550"); 
		}

		function initPolygons() {
			var allElements = document.getElementsByTagName("polygon");
			for (var i = 0; i < allElements.length; i++) {
				var element = allElements[i];
				element.addEventListener("click",changeFill);
				element.setAttribute("stroke-width",strokeWidth);
			}
		}

		function getLocalTiles(element,center) {
			//Return verified neighbors of a tile, as an array of ids.
			var row = parseInt(element.getAttribute("data-row"));
			var col = parseInt(element.getAttribute("data-col"));
			var tempArray = [];
			var returnArray = [];
			tempArray[0] = "h:" + (row-1) + ":" + col;
			tempArray[1] = "h:" + (row-1) + ":" + (col+1);
			tempArray[2] = "h:" + row + ":" + (col+1);
			tempArray[3] = "h:" + row + ":" + (col-1);
			tempArray[4] = "h:" + (row+1) + ":" + (col-1);
			tempArray[5] = "h:" + (row+1) + ":" + col;
			if (center)
				tempArray[6] = "h:" + row + ":" + col;
			for (k = 0; k < 6; k++) {
				if (document.getElementById(tempArray[k]))
					returnArray.push(tempArray[k]);
			}
			return returnArray.slice(0);
		}

		function nextFill(element,colorArray) {
			//Fill in a tile with the next color from a provided color list (colorArray) or from the full color list.
			if (!colorArray || colorArray.length == 0) 
				colorArray = fullColors.slice(0);
			var color = element.getAttribute("fill");
			var oldIndex = color && colorArray.indexOf(color) ? colorArray.indexOf(color) : 0;
			var index = (oldIndex + 1) % colorArray.length;
			setFillAndMask(element,colorArray[index]);
		}

		function randomFill(element,colorArray) {
			//Fill in a tile at random from a provided color list (colorArray) or from the full color list.
			if (!colorArray || colorArray.length == 0) 
				colorArray = fullColors.slice(0);
			var index = Math.floor(colorArray.length*Math.random());
			setFillAndMask(element,colorArray[index]);
		}

		function seedLocations() {
			//Place one location each away from the edges and at least n=2? hexes apart.
			//TODO: Verify on real boards.
			//TODO: Relax these restrictions in free edit mode.
			var omitNegSextant = Math.floor(Math.random()*3);
			var omitPosSextant = Math.floor(Math.random()*3) + 3;
			var j = 0;
			var locArr = ['Tunnel','Castle','Village','Village'];
			var element, row, col;

			for (i = 0; i < 6; i++) {
				if (i != omitNegSextant && i != omitPosSextant) {

					while (!element || element.getAttribute("edge") == 1) {

						col = Math.floor(Math.random()*4);
						if (i % 2 == 0)
							col = -col;

						row = Math.floor(Math.random()*4); //use "horizontal" row numbers
						if (i < 3)
							row = -row;

						element = document.getElementById("h:" + col + ":" + row);
					}

					//color and mark with a class
					setFillAndMask(element,locationColor);
					element.setAttribute("class","locationClass");

					//seed some terrain here
					seedLocationTerrain(element,2*j);
					seedLocationIce(row,col);

					element = undefined;
					j += 1;
				}
			}

			function seedLocationTerrain(element,colorIndex) {
				//Add two different terrain elements placed randomly next to the location, cycling through terrain array.
				var neighborTiles = getLocalTiles(element);

				//first tile
				var index = Math.floor(neighborTiles.length * Math.random());
				var color = nearLocationColors[colorIndex % nearLocationColors.length];
				setFillAndMask(document.getElementById(neighborTiles[index]),color);
				neighborTiles.splice(index,1);
				//second tile
				index = Math.floor(neighborTiles.length * Math.random());
				color = nearLocationColors[(colorIndex + 1) % nearLocationColors.length];
				setFillAndMask(document.getElementById(neighborTiles[index]),color);
			}

			function seedLocationIce(row,col) {
				//Locations tend to be separated by water (ice)
				var seedCol, seedRow = Math.floor(Math.random()) + 7;

				switch (Math.floor(Math.random()*3)) {
					case 0:
						//use both seeds
						break;
					case 1:
						//use random seedRow
						seedRow = row + (Math.floor(Math.random()*3) - 1);
						break;
					case 2:
						//use random seedCol
						seedCol = col + (Math.floor(Math.random()*3) - 1);
						break;
					case 3:
						//use random only
						seedRow = row + (Math.floor(Math.random()*3) - 1);
						seedCol = col + (Math.floor(Math.random()*3) - 1);
						break;
					case 4:
						//do nothing
						return;
				}

				var candidate = document.getElementById("h:" + seedRow + ":" + seedCol);

				if (candidate && !candidate.getAttribute("fill")) {
					setFillAndMask(candidate,iceColor);
				}
			}
		}

		function seedTerrain(seeds) {
			//Extra seeding for the terrain, on top of what was added with seedLocations().
			
			for (i = 0; i < seeds; i++) {
				var row, col;

				row = Math.floor(Math.random()*10) - 4;
				col = Math.floor(Math.random()*10) - 4;

				if (!document.getElementById("h:" + row + ":" + col) || document.getElementById("h:" + row + ":" + col).getAttribute("fill"))
					i = i - 1;
				else
					setFillAndMask(document.getElementById("h:" + row + ":" + col),fullColors[i % fullColors.length]);
			}
		}

		function setFillAndMask(element,color) {
			element.setAttribute("fill",color);
			applyMask(element,color);
		}

		init();

	]]></script>


</svg>
